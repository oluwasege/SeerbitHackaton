// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SeerbitHackaton.Core.DataAccess.EfCore.Context;

#nullable disable

namespace SeerbitHackaton.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SeerbitHackaton.Core.Entities.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CAC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Company", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CAC = "RTYIUEP",
                            CreationTime = new DateTime(2022, 11, 20, 22, 55, 48, 479, DateTimeKind.Local).AddTicks(6862),
                            IsDeleted = false,
                            Location = "Lagos",
                            Name = "Seerbit"
                        });
                });

            modelBuilder.Entity("SeerbitHackaton.Core.Entities.CompanyAdmin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyAdmin", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CompanyId = 1L,
                            CreationTime = new DateTime(2022, 11, 20, 22, 55, 48, 479, DateTimeKind.Local).AddTicks(3889),
                            IsDeleted = false,
                            UserId = 2L
                        });
                });

            modelBuilder.Entity("SeerbitHackaton.Core.Entities.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeNO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Employee", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccountNumber = "0000000000",
                            BankAccountNumber = "",
                            BankName = "Polaris Bank Limited",
                            CompanyId = 1L,
                            CreationTime = new DateTime(2022, 11, 20, 22, 55, 48, 480, DateTimeKind.Local).AddTicks(1017),
                            EmployeeNO = "Seer3089",
                            IsDeleted = false,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 2L,
                            AccountNumber = "0000000000",
                            BankAccountNumber = "",
                            BankName = "Polaris Bank Limited",
                            CompanyId = 1L,
                            CreationTime = new DateTime(2022, 11, 20, 22, 55, 48, 480, DateTimeKind.Local).AddTicks(1021),
                            EmployeeNO = "Seer3060",
                            IsDeleted = false,
                            UserId = 3L
                        });
                });

            modelBuilder.Entity("SeerbitHackaton.Core.Entities.Payroll", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("AmountOfHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountPerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountToBePaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasBeenPaid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Payrolls");
                });

            modelBuilder.Entity("SeerbitHackaton.Core.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefaultRole")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsActive = false,
                            IsDefaultRole = false,
                            Name = "SUPERADMIN"
                        },
                        new
                        {
                            Id = 2L,
                            IsActive = false,
                            IsDefaultRole = false,
                            Name = "COMPANYADMIN"
                        },
                        new
                        {
                            Id = 3L,
                            IsActive = false,
                            IsDefaultRole = false,
                            Name = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("SeerbitHackaton.Core.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("SeerbitHackaton.Core.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompanyAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstTimeLogin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserStatus")
                        .HasColumnType("int");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "550efa27-f79d-4258-86c2-7f872f80a3e5",
                            CreationTime = new DateTime(2022, 11, 20, 22, 55, 48, 759, DateTimeKind.Local).AddTicks(5742),
                            DateOfBirth = new DateTime(1997, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "companyadmin@seerbit.com",
                            EmailConfirmed = true,
                            FirstName = "Company",
                            Gender = 0,
                            IsCompanyAdmin = false,
                            IsDeleted = false,
                            IsEmployee = false,
                            IsFirstTimeLogin = false,
                            IsSuperAdmin = true,
                            LastLoginDate = new DateTime(2022, 11, 20, 22, 55, 48, 759, DateTimeKind.Local).AddTicks(5757),
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "COMPANYADMIN@SEERBIT.COM",
                            NormalizedUserName = "COMPANYADMIN@SEERBIT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ2498r6qb1YLI1tLUGQosi3ZIdd5AycrWMGCxO7NDa2VCnANHWGpaEJ0IMlopMW2w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "99ae0c45-d682-4542-9ba7-1281e471916b",
                            TwoFactorEnabled = false,
                            UserName = "superadmin@seerbit.com",
                            UserStatus = 1,
                            UserType = 2
                        },
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4508b4b8-7336-436e-b7f6-28f1704a225c",
                            CreationTime = new DateTime(2022, 11, 20, 22, 55, 48, 481, DateTimeKind.Local).AddTicks(5008),
                            DateOfBirth = new DateTime(1990, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "superadmin@seerbit.com",
                            EmailConfirmed = true,
                            FirstName = "Super Admin",
                            Gender = 0,
                            IsCompanyAdmin = false,
                            IsDeleted = false,
                            IsEmployee = false,
                            IsFirstTimeLogin = false,
                            IsSuperAdmin = true,
                            LastLoginDate = new DateTime(2022, 11, 20, 22, 55, 48, 481, DateTimeKind.Local).AddTicks(5018),
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@SEERBIT.COM",
                            NormalizedUserName = "SUPERADMIN@SEERBIT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBE3sAdsRodZZbWjKGzyDpIpA/7bLNCwQWOSNCGPXndKgPIZSVk2VD3uHg22JL7nrw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "99ae0c45-d682-4542-9ba7-1281e471916b",
                            TwoFactorEnabled = false,
                            UserName = "superadmin@seerbit.com",
                            UserStatus = 1,
                            UserType = 1
                        },
                        new
                        {
                            Id = 4L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b8cba7fc-40b1-464f-bf4d-05c2336c3c72",
                            CreationTime = new DateTime(2022, 11, 20, 22, 55, 48, 566, DateTimeKind.Local).AddTicks(9662),
                            DateOfBirth = new DateTime(1999, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "employee@seerbit.com",
                            EmailConfirmed = true,
                            FirstName = "Employee",
                            Gender = 0,
                            IsCompanyAdmin = false,
                            IsDeleted = false,
                            IsEmployee = false,
                            IsFirstTimeLogin = false,
                            IsSuperAdmin = true,
                            LastLoginDate = new DateTime(2022, 11, 20, 22, 55, 48, 566, DateTimeKind.Local).AddTicks(9678),
                            LastName = "Employee",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE@SEERBIT.COM",
                            NormalizedUserName = "EMPLOYEE@SEERBIT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMV+pqXI5o+NNUdGosdWkwDV5g0nxwPJ8Aq5lPJqVA+OdHUTEi1r9yU6icZlc8s+dA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "99ae0c45-d682-4542-9ba7-1281e471916b",
                            TwoFactorEnabled = false,
                            UserName = "employee@seerbit.com",
                            UserStatus = 1,
                            UserType = 3
                        },
                        new
                        {
                            Id = 3L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "15a75a26-0efb-4055-8a84-08eccde3c653",
                            CreationTime = new DateTime(2022, 11, 20, 22, 55, 48, 649, DateTimeKind.Local).AddTicks(676),
                            DateOfBirth = new DateTime(1999, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "employee2@seerbit.com",
                            EmailConfirmed = true,
                            FirstName = "Employee",
                            Gender = 0,
                            IsCompanyAdmin = false,
                            IsDeleted = false,
                            IsEmployee = false,
                            IsFirstTimeLogin = false,
                            IsSuperAdmin = true,
                            LastLoginDate = new DateTime(2022, 11, 20, 22, 55, 48, 649, DateTimeKind.Local).AddTicks(696),
                            LastName = "Employee",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE2@SEERBIT.COM",
                            NormalizedUserName = "EMPLOYEE2@SEERBIT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBiZfe3qnLi65idrVaOF/l4cXiEuIgWvio5wRFcPEnVVh0a/S8BrfKpVUlvwR5JXLw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "99ae0c45-d682-4542-9ba7-1281e471916b",
                            TwoFactorEnabled = false,
                            UserName = "employee2@seerbit.com",
                            UserStatus = 1,
                            UserType = 3
                        });
                });

            modelBuilder.Entity("SeerbitHackaton.Core.Entities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("SeerbitHackaton.Core.Entities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("SeerbitHackaton.Core.Entities.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            RoleId = 1L
                        },
                        new
                        {
                            UserId = 2L,
                            RoleId = 2L
                        },
                        new
                        {
                            UserId = 3L,
                            RoleId = 3L
                        },
                        new
                        {
                            UserId = 4L,
                            RoleId = 3L
                        });
                });

            modelBuilder.Entity("SeerbitHackaton.Core.Entities.UserToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("SeerbitHackaton.Core.Entities.CompanyAdmin", b =>
                {
                    b.HasOne("SeerbitHackaton.Core.Entities.Company", "Company")
                        .WithMany("CompanyAdmins")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeerbitHackaton.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SeerbitHackaton.Core.Entities.Employee", b =>
                {
                    b.HasOne("SeerbitHackaton.Core.Entities.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeerbitHackaton.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SeerbitHackaton.Core.Entities.Payroll", b =>
                {
                    b.HasOne("SeerbitHackaton.Core.Entities.Employee", "Employee")
                        .WithMany("Payroll")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("SeerbitHackaton.Core.Entities.RoleClaim", b =>
                {
                    b.HasOne("SeerbitHackaton.Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeerbitHackaton.Core.Entities.User", b =>
                {
                    b.OwnsMany("SeerbitHackaton.Core.Entities.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("SeerbitHackaton.Core.Entities.UserClaim", b =>
                {
                    b.HasOne("SeerbitHackaton.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeerbitHackaton.Core.Entities.UserLogin", b =>
                {
                    b.HasOne("SeerbitHackaton.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeerbitHackaton.Core.Entities.UserRole", b =>
                {
                    b.HasOne("SeerbitHackaton.Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeerbitHackaton.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeerbitHackaton.Core.Entities.UserToken", b =>
                {
                    b.HasOne("SeerbitHackaton.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeerbitHackaton.Core.Entities.Company", b =>
                {
                    b.Navigation("CompanyAdmins");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("SeerbitHackaton.Core.Entities.Employee", b =>
                {
                    b.Navigation("Payroll");
                });
#pragma warning restore 612, 618
        }
    }
}
